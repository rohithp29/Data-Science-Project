{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNZkHjfU3rsMreNcSqXsGZ6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/rohithp29/Data-Science-Project/blob/main/Task%202%20Exploratory%20Data%20Analysis\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3sZkaB2h4wId"
      },
      "outputs": [],
      "source": [
        "# Importing the essential libraries\n",
        "import pandas as pd\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Importing the data to perform manipulations\n",
        "\n",
        "path=r\"/content/Global_Superstore2.csv\"\n",
        "df=pd.read_csv(path,sep=\",\",encoding='latin-1')"
      ],
      "metadata": {
        "id": "yjCf6PoQA9Xn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Displaying first few rows\n",
        "\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 603
        },
        "id": "2jhushXQCm9E",
        "outputId": "434bd7be-35ed-4b9d-ffdb-43765921a95e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Row ID         Order ID  Order Date   Ship Date     Ship Mode Customer ID  \\\n",
              "0   32298   CA-2012-124891  31-07-2012  31-07-2012      Same Day    RH-19495   \n",
              "1   26341    IN-2013-77878  05-02-2013  07-02-2013  Second Class    JR-16210   \n",
              "2   25330    IN-2013-71249  17-10-2013  18-10-2013   First Class    CR-12730   \n",
              "3   13524  ES-2013-1579342  28-01-2013  30-01-2013   First Class    KM-16375   \n",
              "4   47221     SG-2013-4320  05-11-2013  06-11-2013      Same Day     RH-9495   \n",
              "\n",
              "      Customer Name      Segment           City            State  ...  \\\n",
              "0       Rick Hansen     Consumer  New York City         New York  ...   \n",
              "1     Justin Ritter    Corporate     Wollongong  New South Wales  ...   \n",
              "2      Craig Reiter     Consumer       Brisbane       Queensland  ...   \n",
              "3  Katherine Murray  Home Office         Berlin           Berlin  ...   \n",
              "4       Rick Hansen     Consumer          Dakar            Dakar  ...   \n",
              "\n",
              "         Product ID    Category Sub-Category  \\\n",
              "0   TEC-AC-10003033  Technology  Accessories   \n",
              "1   FUR-CH-10003950   Furniture       Chairs   \n",
              "2   TEC-PH-10004664  Technology       Phones   \n",
              "3   TEC-PH-10004583  Technology       Phones   \n",
              "4  TEC-SHA-10000501  Technology      Copiers   \n",
              "\n",
              "                                        Product Name     Sales Quantity  \\\n",
              "0  Plantronics CS510 - Over-the-Head monaural Wir...  2309.650        7   \n",
              "1          Novimex Executive Leather Armchair, Black  3709.395        9   \n",
              "2                  Nokia Smart Phone, with Caller ID  5175.171        9   \n",
              "3                     Motorola Smart Phone, Cordless  2892.510        5   \n",
              "4                     Sharp Wireless Fax, High-Speed  2832.960        8   \n",
              "\n",
              "  Discount    Profit  Shipping Cost  Order Priority  \n",
              "0      0.0  762.1845         933.57        Critical  \n",
              "1      0.1 -288.7650         923.63        Critical  \n",
              "2      0.1  919.9710         915.49          Medium  \n",
              "3      0.1  -96.5400         910.16          Medium  \n",
              "4      0.0  311.5200         903.04        Critical  \n",
              "\n",
              "[5 rows x 24 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-56c20ef5-b6fd-484e-8a92-0c8d50f1e40c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Row ID</th>\n",
              "      <th>Order ID</th>\n",
              "      <th>Order Date</th>\n",
              "      <th>Ship Date</th>\n",
              "      <th>Ship Mode</th>\n",
              "      <th>Customer ID</th>\n",
              "      <th>Customer Name</th>\n",
              "      <th>Segment</th>\n",
              "      <th>City</th>\n",
              "      <th>State</th>\n",
              "      <th>...</th>\n",
              "      <th>Product ID</th>\n",
              "      <th>Category</th>\n",
              "      <th>Sub-Category</th>\n",
              "      <th>Product Name</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>Discount</th>\n",
              "      <th>Profit</th>\n",
              "      <th>Shipping Cost</th>\n",
              "      <th>Order Priority</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>32298</td>\n",
              "      <td>CA-2012-124891</td>\n",
              "      <td>31-07-2012</td>\n",
              "      <td>31-07-2012</td>\n",
              "      <td>Same Day</td>\n",
              "      <td>RH-19495</td>\n",
              "      <td>Rick Hansen</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>New York City</td>\n",
              "      <td>New York</td>\n",
              "      <td>...</td>\n",
              "      <td>TEC-AC-10003033</td>\n",
              "      <td>Technology</td>\n",
              "      <td>Accessories</td>\n",
              "      <td>Plantronics CS510 - Over-the-Head monaural Wir...</td>\n",
              "      <td>2309.650</td>\n",
              "      <td>7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>762.1845</td>\n",
              "      <td>933.57</td>\n",
              "      <td>Critical</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>26341</td>\n",
              "      <td>IN-2013-77878</td>\n",
              "      <td>05-02-2013</td>\n",
              "      <td>07-02-2013</td>\n",
              "      <td>Second Class</td>\n",
              "      <td>JR-16210</td>\n",
              "      <td>Justin Ritter</td>\n",
              "      <td>Corporate</td>\n",
              "      <td>Wollongong</td>\n",
              "      <td>New South Wales</td>\n",
              "      <td>...</td>\n",
              "      <td>FUR-CH-10003950</td>\n",
              "      <td>Furniture</td>\n",
              "      <td>Chairs</td>\n",
              "      <td>Novimex Executive Leather Armchair, Black</td>\n",
              "      <td>3709.395</td>\n",
              "      <td>9</td>\n",
              "      <td>0.1</td>\n",
              "      <td>-288.7650</td>\n",
              "      <td>923.63</td>\n",
              "      <td>Critical</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>25330</td>\n",
              "      <td>IN-2013-71249</td>\n",
              "      <td>17-10-2013</td>\n",
              "      <td>18-10-2013</td>\n",
              "      <td>First Class</td>\n",
              "      <td>CR-12730</td>\n",
              "      <td>Craig Reiter</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>Brisbane</td>\n",
              "      <td>Queensland</td>\n",
              "      <td>...</td>\n",
              "      <td>TEC-PH-10004664</td>\n",
              "      <td>Technology</td>\n",
              "      <td>Phones</td>\n",
              "      <td>Nokia Smart Phone, with Caller ID</td>\n",
              "      <td>5175.171</td>\n",
              "      <td>9</td>\n",
              "      <td>0.1</td>\n",
              "      <td>919.9710</td>\n",
              "      <td>915.49</td>\n",
              "      <td>Medium</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>13524</td>\n",
              "      <td>ES-2013-1579342</td>\n",
              "      <td>28-01-2013</td>\n",
              "      <td>30-01-2013</td>\n",
              "      <td>First Class</td>\n",
              "      <td>KM-16375</td>\n",
              "      <td>Katherine Murray</td>\n",
              "      <td>Home Office</td>\n",
              "      <td>Berlin</td>\n",
              "      <td>Berlin</td>\n",
              "      <td>...</td>\n",
              "      <td>TEC-PH-10004583</td>\n",
              "      <td>Technology</td>\n",
              "      <td>Phones</td>\n",
              "      <td>Motorola Smart Phone, Cordless</td>\n",
              "      <td>2892.510</td>\n",
              "      <td>5</td>\n",
              "      <td>0.1</td>\n",
              "      <td>-96.5400</td>\n",
              "      <td>910.16</td>\n",
              "      <td>Medium</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>47221</td>\n",
              "      <td>SG-2013-4320</td>\n",
              "      <td>05-11-2013</td>\n",
              "      <td>06-11-2013</td>\n",
              "      <td>Same Day</td>\n",
              "      <td>RH-9495</td>\n",
              "      <td>Rick Hansen</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>Dakar</td>\n",
              "      <td>Dakar</td>\n",
              "      <td>...</td>\n",
              "      <td>TEC-SHA-10000501</td>\n",
              "      <td>Technology</td>\n",
              "      <td>Copiers</td>\n",
              "      <td>Sharp Wireless Fax, High-Speed</td>\n",
              "      <td>2832.960</td>\n",
              "      <td>8</td>\n",
              "      <td>0.0</td>\n",
              "      <td>311.5200</td>\n",
              "      <td>903.04</td>\n",
              "      <td>Critical</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 24 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-56c20ef5-b6fd-484e-8a92-0c8d50f1e40c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-56c20ef5-b6fd-484e-8a92-0c8d50f1e40c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-56c20ef5-b6fd-484e-8a92-0c8d50f1e40c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-09724f65-2bb9-45fc-a41c-65b469cab19a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-09724f65-2bb9-45fc-a41c-65b469cab19a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-09724f65-2bb9-45fc-a41c-65b469cab19a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "ej8HshNpClQl",
        "outputId": "859a29a6-1a8a-4a44-9ce1-1e52316cbe67"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Row ID   Postal Code         Sales      Quantity      Discount  \\\n",
              "count  51290.00000   9994.000000  51290.000000  51290.000000  51290.000000   \n",
              "mean   25645.50000  55190.379428    246.490581      3.476545      0.142908   \n",
              "std    14806.29199  32063.693350    487.565361      2.278766      0.212280   \n",
              "min        1.00000   1040.000000      0.444000      1.000000      0.000000   \n",
              "25%    12823.25000  23223.000000     30.758625      2.000000      0.000000   \n",
              "50%    25645.50000  56430.500000     85.053000      3.000000      0.000000   \n",
              "75%    38467.75000  90008.000000    251.053200      5.000000      0.200000   \n",
              "max    51290.00000  99301.000000  22638.480000     14.000000      0.850000   \n",
              "\n",
              "             Profit  Shipping Cost  \n",
              "count  51290.000000   51290.000000  \n",
              "mean      28.610982      26.375915  \n",
              "std      174.340972      57.296804  \n",
              "min    -6599.978000       0.000000  \n",
              "25%        0.000000       2.610000  \n",
              "50%        9.240000       7.790000  \n",
              "75%       36.810000      24.450000  \n",
              "max     8399.976000     933.570000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e281bf34-1136-4824-acb3-00c5d6c8035b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Row ID</th>\n",
              "      <th>Postal Code</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>Discount</th>\n",
              "      <th>Profit</th>\n",
              "      <th>Shipping Cost</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>51290.00000</td>\n",
              "      <td>9994.000000</td>\n",
              "      <td>51290.000000</td>\n",
              "      <td>51290.000000</td>\n",
              "      <td>51290.000000</td>\n",
              "      <td>51290.000000</td>\n",
              "      <td>51290.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>25645.50000</td>\n",
              "      <td>55190.379428</td>\n",
              "      <td>246.490581</td>\n",
              "      <td>3.476545</td>\n",
              "      <td>0.142908</td>\n",
              "      <td>28.610982</td>\n",
              "      <td>26.375915</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>14806.29199</td>\n",
              "      <td>32063.693350</td>\n",
              "      <td>487.565361</td>\n",
              "      <td>2.278766</td>\n",
              "      <td>0.212280</td>\n",
              "      <td>174.340972</td>\n",
              "      <td>57.296804</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.00000</td>\n",
              "      <td>1040.000000</td>\n",
              "      <td>0.444000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-6599.978000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>12823.25000</td>\n",
              "      <td>23223.000000</td>\n",
              "      <td>30.758625</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.610000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>25645.50000</td>\n",
              "      <td>56430.500000</td>\n",
              "      <td>85.053000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>9.240000</td>\n",
              "      <td>7.790000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>38467.75000</td>\n",
              "      <td>90008.000000</td>\n",
              "      <td>251.053200</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>0.200000</td>\n",
              "      <td>36.810000</td>\n",
              "      <td>24.450000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>51290.00000</td>\n",
              "      <td>99301.000000</td>\n",
              "      <td>22638.480000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>0.850000</td>\n",
              "      <td>8399.976000</td>\n",
              "      <td>933.570000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e281bf34-1136-4824-acb3-00c5d6c8035b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e281bf34-1136-4824-acb3-00c5d6c8035b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e281bf34-1136-4824-acb3-00c5d6c8035b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f4dd2f7d-3768-4eb2-8e26-69270af5bd8f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f4dd2f7d-3768-4eb2-8e26-69270af5bd8f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f4dd2f7d-3768-4eb2-8e26-69270af5bd8f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Row ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18484.859353727166,\n        \"min\": 1.0,\n        \"max\": 51290.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          51290.0,\n          25645.5,\n          38467.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Postal Code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35860.31406157157,\n        \"min\": 1040.0,\n        \"max\": 99301.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          55190.3794276566,\n          56430.5,\n          9994.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sales\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18669.493303992887,\n        \"min\": 0.444,\n        \"max\": 51290.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          246.49058120257362,\n          85.053,\n          51290.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18132.20048722294,\n        \"min\": 1.0,\n        \"max\": 51290.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.4765451355039967,\n          3.0,\n          51290.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Discount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18133.682432994065,\n        \"min\": 0.0,\n        \"max\": 51290.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          51290.0,\n          0.14290754533047378,\n          0.85\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Profit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18474.634910759294,\n        \"min\": -6599.978,\n        \"max\": 51290.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          28.61098247767596,\n          9.24,\n          51290.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shipping Cost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18083.45124724187,\n        \"min\": 0.0,\n        \"max\": 51290.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          26.375915188145832,\n          7.79,\n          51290.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5Kr5KccODsOX",
        "outputId": "3f4f94cf-0a81-4cc3-8055-cde0bbabfca0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(51290, 24)"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xp3TfB1ADvc6",
        "outputId": "7d5a7052-dd4c-44e7-fba5-7c07e1d64aec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 51290 entries, 0 to 51289\n",
            "Data columns (total 24 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   Row ID          51290 non-null  int64  \n",
            " 1   Order ID        51290 non-null  object \n",
            " 2   Order Date      51290 non-null  object \n",
            " 3   Ship Date       51290 non-null  object \n",
            " 4   Ship Mode       51290 non-null  object \n",
            " 5   Customer ID     51290 non-null  object \n",
            " 6   Customer Name   51290 non-null  object \n",
            " 7   Segment         51290 non-null  object \n",
            " 8   City            51290 non-null  object \n",
            " 9   State           51290 non-null  object \n",
            " 10  Country         51290 non-null  object \n",
            " 11  Postal Code     9994 non-null   float64\n",
            " 12  Market          51290 non-null  object \n",
            " 13  Region          51290 non-null  object \n",
            " 14  Product ID      51290 non-null  object \n",
            " 15  Category        51290 non-null  object \n",
            " 16  Sub-Category    51290 non-null  object \n",
            " 17  Product Name    51290 non-null  object \n",
            " 18  Sales           51290 non-null  float64\n",
            " 19  Quantity        51290 non-null  int64  \n",
            " 20  Discount        51290 non-null  float64\n",
            " 21  Profit          51290 non-null  float64\n",
            " 22  Shipping Cost   51290 non-null  float64\n",
            " 23  Order Priority  51290 non-null  object \n",
            "dtypes: float64(5), int64(2), object(17)\n",
            "memory usage: 9.4+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**CLEANING DATA**"
      ],
      "metadata": {
        "id": "tfvKSNrnEPCP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Handling of Missing Values\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 837
        },
        "id": "hLQaidlPELGw",
        "outputId": "04487181-4710-43fa-ff7d-ae58504b476f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Row ID                0\n",
              "Order ID              0\n",
              "Order Date            0\n",
              "Ship Date             0\n",
              "Ship Mode             0\n",
              "Customer ID           0\n",
              "Customer Name         0\n",
              "Segment               0\n",
              "City                  0\n",
              "State                 0\n",
              "Country               0\n",
              "Postal Code       41296\n",
              "Market                0\n",
              "Region                0\n",
              "Product ID            0\n",
              "Category              0\n",
              "Sub-Category          0\n",
              "Product Name          0\n",
              "Sales                 0\n",
              "Quantity              0\n",
              "Discount              0\n",
              "Profit                0\n",
              "Shipping Cost         0\n",
              "Order Priority        0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Row ID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Order ID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Order Date</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ship Date</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ship Mode</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Customer ID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Customer Name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Segment</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>City</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>State</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Country</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Postal Code</th>\n",
              "      <td>41296</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Market</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Region</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product ID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Category</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sub-Category</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product Name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sales</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Quantity</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Discount</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Profit</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Shipping Cost</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Order Priority</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Identifying the duplicate values\n",
        "df.duplicated().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PbyWwzLbEjZ0",
        "outputId": "adaeabc7-421c-46f4-8aa5-9665d345604e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Removing the Duplicated Rows/Columns\n",
        "df.drop('Postal Code',axis=1,inplace=True)\n",
        "print(\"removed affected rows/columns.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w3ymZeXoFac6",
        "outputId": "8992b62e-1c6b-47b3-a2f9-82377722bd1d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "removed affected rows/columns.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Displaying the rows after removing missing vales\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 603
        },
        "id": "wiQlN_MBFhdc",
        "outputId": "d45669ea-ffe7-4172-bead-dde8e2bc517f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Row ID         Order ID  Order Date   Ship Date     Ship Mode Customer ID  \\\n",
              "0   32298   CA-2012-124891  31-07-2012  31-07-2012      Same Day    RH-19495   \n",
              "1   26341    IN-2013-77878  05-02-2013  07-02-2013  Second Class    JR-16210   \n",
              "2   25330    IN-2013-71249  17-10-2013  18-10-2013   First Class    CR-12730   \n",
              "3   13524  ES-2013-1579342  28-01-2013  30-01-2013   First Class    KM-16375   \n",
              "4   47221     SG-2013-4320  05-11-2013  06-11-2013      Same Day     RH-9495   \n",
              "\n",
              "      Customer Name      Segment           City            State  ...  \\\n",
              "0       Rick Hansen     Consumer  New York City         New York  ...   \n",
              "1     Justin Ritter    Corporate     Wollongong  New South Wales  ...   \n",
              "2      Craig Reiter     Consumer       Brisbane       Queensland  ...   \n",
              "3  Katherine Murray  Home Office         Berlin           Berlin  ...   \n",
              "4       Rick Hansen     Consumer          Dakar            Dakar  ...   \n",
              "\n",
              "         Product ID    Category Sub-Category  \\\n",
              "0   TEC-AC-10003033  Technology  Accessories   \n",
              "1   FUR-CH-10003950   Furniture       Chairs   \n",
              "2   TEC-PH-10004664  Technology       Phones   \n",
              "3   TEC-PH-10004583  Technology       Phones   \n",
              "4  TEC-SHA-10000501  Technology      Copiers   \n",
              "\n",
              "                                        Product Name     Sales Quantity  \\\n",
              "0  Plantronics CS510 - Over-the-Head monaural Wir...  2309.650        7   \n",
              "1          Novimex Executive Leather Armchair, Black  3709.395        9   \n",
              "2                  Nokia Smart Phone, with Caller ID  5175.171        9   \n",
              "3                     Motorola Smart Phone, Cordless  2892.510        5   \n",
              "4                     Sharp Wireless Fax, High-Speed  2832.960        8   \n",
              "\n",
              "  Discount    Profit  Shipping Cost  Order Priority  \n",
              "0      0.0  762.1845         933.57        Critical  \n",
              "1      0.1 -288.7650         923.63        Critical  \n",
              "2      0.1  919.9710         915.49          Medium  \n",
              "3      0.1  -96.5400         910.16          Medium  \n",
              "4      0.0  311.5200         903.04        Critical  \n",
              "\n",
              "[5 rows x 23 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6bc0fcae-7856-42af-bd2f-816ff03c13de\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Row ID</th>\n",
              "      <th>Order ID</th>\n",
              "      <th>Order Date</th>\n",
              "      <th>Ship Date</th>\n",
              "      <th>Ship Mode</th>\n",
              "      <th>Customer ID</th>\n",
              "      <th>Customer Name</th>\n",
              "      <th>Segment</th>\n",
              "      <th>City</th>\n",
              "      <th>State</th>\n",
              "      <th>...</th>\n",
              "      <th>Product ID</th>\n",
              "      <th>Category</th>\n",
              "      <th>Sub-Category</th>\n",
              "      <th>Product Name</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>Discount</th>\n",
              "      <th>Profit</th>\n",
              "      <th>Shipping Cost</th>\n",
              "      <th>Order Priority</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>32298</td>\n",
              "      <td>CA-2012-124891</td>\n",
              "      <td>31-07-2012</td>\n",
              "      <td>31-07-2012</td>\n",
              "      <td>Same Day</td>\n",
              "      <td>RH-19495</td>\n",
              "      <td>Rick Hansen</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>New York City</td>\n",
              "      <td>New York</td>\n",
              "      <td>...</td>\n",
              "      <td>TEC-AC-10003033</td>\n",
              "      <td>Technology</td>\n",
              "      <td>Accessories</td>\n",
              "      <td>Plantronics CS510 - Over-the-Head monaural Wir...</td>\n",
              "      <td>2309.650</td>\n",
              "      <td>7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>762.1845</td>\n",
              "      <td>933.57</td>\n",
              "      <td>Critical</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>26341</td>\n",
              "      <td>IN-2013-77878</td>\n",
              "      <td>05-02-2013</td>\n",
              "      <td>07-02-2013</td>\n",
              "      <td>Second Class</td>\n",
              "      <td>JR-16210</td>\n",
              "      <td>Justin Ritter</td>\n",
              "      <td>Corporate</td>\n",
              "      <td>Wollongong</td>\n",
              "      <td>New South Wales</td>\n",
              "      <td>...</td>\n",
              "      <td>FUR-CH-10003950</td>\n",
              "      <td>Furniture</td>\n",
              "      <td>Chairs</td>\n",
              "      <td>Novimex Executive Leather Armchair, Black</td>\n",
              "      <td>3709.395</td>\n",
              "      <td>9</td>\n",
              "      <td>0.1</td>\n",
              "      <td>-288.7650</td>\n",
              "      <td>923.63</td>\n",
              "      <td>Critical</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>25330</td>\n",
              "      <td>IN-2013-71249</td>\n",
              "      <td>17-10-2013</td>\n",
              "      <td>18-10-2013</td>\n",
              "      <td>First Class</td>\n",
              "      <td>CR-12730</td>\n",
              "      <td>Craig Reiter</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>Brisbane</td>\n",
              "      <td>Queensland</td>\n",
              "      <td>...</td>\n",
              "      <td>TEC-PH-10004664</td>\n",
              "      <td>Technology</td>\n",
              "      <td>Phones</td>\n",
              "      <td>Nokia Smart Phone, with Caller ID</td>\n",
              "      <td>5175.171</td>\n",
              "      <td>9</td>\n",
              "      <td>0.1</td>\n",
              "      <td>919.9710</td>\n",
              "      <td>915.49</td>\n",
              "      <td>Medium</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>13524</td>\n",
              "      <td>ES-2013-1579342</td>\n",
              "      <td>28-01-2013</td>\n",
              "      <td>30-01-2013</td>\n",
              "      <td>First Class</td>\n",
              "      <td>KM-16375</td>\n",
              "      <td>Katherine Murray</td>\n",
              "      <td>Home Office</td>\n",
              "      <td>Berlin</td>\n",
              "      <td>Berlin</td>\n",
              "      <td>...</td>\n",
              "      <td>TEC-PH-10004583</td>\n",
              "      <td>Technology</td>\n",
              "      <td>Phones</td>\n",
              "      <td>Motorola Smart Phone, Cordless</td>\n",
              "      <td>2892.510</td>\n",
              "      <td>5</td>\n",
              "      <td>0.1</td>\n",
              "      <td>-96.5400</td>\n",
              "      <td>910.16</td>\n",
              "      <td>Medium</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>47221</td>\n",
              "      <td>SG-2013-4320</td>\n",
              "      <td>05-11-2013</td>\n",
              "      <td>06-11-2013</td>\n",
              "      <td>Same Day</td>\n",
              "      <td>RH-9495</td>\n",
              "      <td>Rick Hansen</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>Dakar</td>\n",
              "      <td>Dakar</td>\n",
              "      <td>...</td>\n",
              "      <td>TEC-SHA-10000501</td>\n",
              "      <td>Technology</td>\n",
              "      <td>Copiers</td>\n",
              "      <td>Sharp Wireless Fax, High-Speed</td>\n",
              "      <td>2832.960</td>\n",
              "      <td>8</td>\n",
              "      <td>0.0</td>\n",
              "      <td>311.5200</td>\n",
              "      <td>903.04</td>\n",
              "      <td>Critical</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 23 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6bc0fcae-7856-42af-bd2f-816ff03c13de')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6bc0fcae-7856-42af-bd2f-816ff03c13de button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6bc0fcae-7856-42af-bd2f-816ff03c13de');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-136d8425-6014-4327-912a-8b109d4f56c5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-136d8425-6014-4327-912a-8b109d4f56c5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-136d8425-6014-4327-912a-8b109d4f56c5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Statistical Analysis**"
      ],
      "metadata": {
        "id": "7DhKGhnqFmwV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from scipy import stats"
      ],
      "metadata": {
        "id": "VZcKIZZiFrI2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Handle Outliers using Statistical Techniques like IQR\n",
        "\n",
        "#IQR of Sales attributes\n",
        "Q3=df['Sales'].quantile(0.25)\n",
        "Q1=df['Sales'].quantile(0.75)\n",
        "IQR=Q3-Q1\n",
        "Lower_bound=Q1-(1.5*IQR)\n",
        "Upper_bound=Q3+(1.5*IQR)\n",
        "print(\"Lower bound of Sales attributes\",Lower_bound)\n",
        "print(\"Upper bound of Sales attributes\",Upper_bound)\n",
        "print(\"IQR of Sales attributes\",IQR)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WaQkwHa0F4x3",
        "outputId": "a63ce146-c6e0-4877-8825-ff0f72633b95"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Lower bound of Sales attributes 581.4950625\n",
            "Upper bound of Sales attributes -299.6832375\n",
            "IQR of Sales attributes -220.294575\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "TYDpa6O8GAXI",
        "outputId": "7ff405d9-5716-4c42-bf2b-d43d116c65c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Row ID         Sales      Quantity      Discount        Profit  \\\n",
              "count  51290.00000  51290.000000  51290.000000  51290.000000  51290.000000   \n",
              "mean   25645.50000    246.490581      3.476545      0.142908     28.610982   \n",
              "std    14806.29199    487.565361      2.278766      0.212280    174.340972   \n",
              "min        1.00000      0.444000      1.000000      0.000000  -6599.978000   \n",
              "25%    12823.25000     30.758625      2.000000      0.000000      0.000000   \n",
              "50%    25645.50000     85.053000      3.000000      0.000000      9.240000   \n",
              "75%    38467.75000    251.053200      5.000000      0.200000     36.810000   \n",
              "max    51290.00000  22638.480000     14.000000      0.850000   8399.976000   \n",
              "\n",
              "       Shipping Cost  \n",
              "count   51290.000000  \n",
              "mean       26.375915  \n",
              "std        57.296804  \n",
              "min         0.000000  \n",
              "25%         2.610000  \n",
              "50%         7.790000  \n",
              "75%        24.450000  \n",
              "max       933.570000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c0dfc2b2-d0ef-46c0-9bb4-770cbadc7491\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Row ID</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>Discount</th>\n",
              "      <th>Profit</th>\n",
              "      <th>Shipping Cost</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>51290.00000</td>\n",
              "      <td>51290.000000</td>\n",
              "      <td>51290.000000</td>\n",
              "      <td>51290.000000</td>\n",
              "      <td>51290.000000</td>\n",
              "      <td>51290.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>25645.50000</td>\n",
              "      <td>246.490581</td>\n",
              "      <td>3.476545</td>\n",
              "      <td>0.142908</td>\n",
              "      <td>28.610982</td>\n",
              "      <td>26.375915</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>14806.29199</td>\n",
              "      <td>487.565361</td>\n",
              "      <td>2.278766</td>\n",
              "      <td>0.212280</td>\n",
              "      <td>174.340972</td>\n",
              "      <td>57.296804</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.444000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-6599.978000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>12823.25000</td>\n",
              "      <td>30.758625</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.610000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>25645.50000</td>\n",
              "      <td>85.053000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>9.240000</td>\n",
              "      <td>7.790000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>38467.75000</td>\n",
              "      <td>251.053200</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>0.200000</td>\n",
              "      <td>36.810000</td>\n",
              "      <td>24.450000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>51290.00000</td>\n",
              "      <td>22638.480000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>0.850000</td>\n",
              "      <td>8399.976000</td>\n",
              "      <td>933.570000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c0dfc2b2-d0ef-46c0-9bb4-770cbadc7491')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c0dfc2b2-d0ef-46c0-9bb4-770cbadc7491 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c0dfc2b2-d0ef-46c0-9bb4-770cbadc7491');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-454bdc60-265d-4e9f-b871-cd7cfdb19c50\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-454bdc60-265d-4e9f-b871-cd7cfdb19c50')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-454bdc60-265d-4e9f-b871-cd7cfdb19c50 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Row ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18484.859353727166,\n        \"min\": 1.0,\n        \"max\": 51290.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          51290.0,\n          25645.5,\n          38467.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sales\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18669.493303992887,\n        \"min\": 0.444,\n        \"max\": 51290.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          246.49058120257362,\n          85.053,\n          51290.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18132.20048722294,\n        \"min\": 1.0,\n        \"max\": 51290.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.4765451355039967,\n          3.0,\n          51290.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Discount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18133.682432994065,\n        \"min\": 0.0,\n        \"max\": 51290.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          51290.0,\n          0.14290754533047378,\n          0.85\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Profit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18474.634910759294,\n        \"min\": -6599.978,\n        \"max\": 51290.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          28.61098247767596,\n          9.24,\n          51290.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shipping Cost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18083.45124724187,\n        \"min\": 0.0,\n        \"max\": 51290.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          26.375915188145832,\n          7.79,\n          51290.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "profit_mean=df[\"Profit\"].mean()\n",
        "sales_mean=df[\"Sales\"].mean()\n",
        "print(profit_mean)\n",
        "print(sales_mean)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zdf4Mnm7GEfm",
        "outputId": "6b8ddd30-2eca-49b7-8e81-ca04750557db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "28.61098247767596\n",
            "246.49058120257362\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "profit_med=df[\"Profit\"].median()\n",
        "sales_med=df[\"Sales\"].median()\n",
        "print(profit_med)\n",
        "print(sales_med)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ed-qvdHMGFez",
        "outputId": "f1185d99-b960-4c5a-8635-a043726385c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "9.24\n",
            "85.053\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "profit_std=df[\"Profit\"].std()\n",
        "sales_std=df[\"Sales\"].std()\n",
        "print(profit_mean)\n",
        "print(sales_mean)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ar4Hg7sJGJ4D",
        "outputId": "cbc674a9-879b-4edf-e7a6-2b690accef3e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "28.61098247767596\n",
            "246.49058120257362\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "profit_var=df[\"Profit\"].var()\n",
        "sales_var=df[\"Sales\"].var()\n",
        "print(profit_var)\n",
        "print(sales_var)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bFLRHM3iGMmp",
        "outputId": "aee0e2f4-f866-4974-f8d3-f5c63b50c139"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "30394.774483046996\n",
            "237719.9807970923\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#  Compute correlations between variables to study relationships.\n",
        "correlation_matrix = df.select_dtypes(include=np.number).corr()\n",
        "print(correlation_matrix)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TBBODadgGPFP",
        "outputId": "f30af7ec-043a-4b9a-c7f1-36cc6526fdf1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 Row ID     Sales  Quantity  Discount    Profit  Shipping Cost\n",
            "Row ID         1.000000 -0.043889 -0.173483  0.087594 -0.019037      -0.039078\n",
            "Sales         -0.043889  1.000000  0.313577 -0.086722  0.484918       0.768073\n",
            "Quantity      -0.173483  0.313577  1.000000 -0.019875  0.104365       0.272649\n",
            "Discount       0.087594 -0.086722 -0.019875  1.000000 -0.316490      -0.079056\n",
            "Profit        -0.019037  0.484918  0.104365 -0.316490  1.000000       0.354441\n",
            "Shipping Cost -0.039078  0.768073  0.272649 -0.079056  0.354441       1.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Data Visualization:**"
      ],
      "metadata": {
        "id": "2pObm9-zGR37"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Importing necessary libaries for Data Visualization\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "s65I_A48G6Hh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Histograms for numerical data\n",
        "\n",
        "sns.set_style(\"whitegrid\")\n",
        "\n",
        "# Create Figure\n",
        "plt.figure(figsize=(14, 6))\n",
        "\n",
        "# Sales Distribution\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.histplot(df['Sales'], kde=True, bins=30, color='royalblue')\n",
        "plt.title('Distribution of Sales', fontsize=14)\n",
        "plt.xlabel('Sales', fontsize=12)\n",
        "plt.ylabel('Frequency', fontsize=12)\n",
        "\n",
        "# Profit Distribution\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.histplot(df['Profit'], kde=True, bins=30, color='darkorange')\n",
        "plt.title('Distribution of Profit', fontsize=14)\n",
        "plt.xlabel('Profit', fontsize=12)\n",
        "plt.ylabel('Frequency', fontsize=12)\n",
        "\n",
        "# Adjusting Layout\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "qgIbwHi_GTiD",
        "outputId": "5367b634-2e31-45cc-8385-df621f435687"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Boxplots for outlier detection\n",
        "\n",
        "# Set Seaborn Style\n",
        "sns.set_style(\"whitegrid\")\n",
        "\n",
        "# Create Figure\n",
        "plt.figure(figsize=(14, 6))\n",
        "\n",
        "# Boxplot for Sales\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.boxplot(y=df['Sales'], color='royalblue', flierprops={'marker': 'o', 'markerfacecolor': 'red', 'markersize': 6})\n",
        "plt.title('Boxplot of Sales', fontsize=14)\n",
        "plt.ylabel('Sales', fontsize=12)\n",
        "\n",
        "# Boxplot for Profit\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.boxplot(y=df['Profit'], color='darkorange', flierprops={'marker': 'o', 'markerfacecolor': 'red', 'markersize': 6})\n",
        "plt.title('Boxplot of Profit', fontsize=14)\n",
        "plt.ylabel('Profit', fontsize=12)\n",
        "\n",
        "# Adjust Layout\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "_EY5LLuPGWNp",
        "outputId": "5605b98f-8674-4ace-d468-d177f1c066c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x600 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABW0AAAJOCAYAAADMCCWlAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAowVJREFUeJzs3Xlc1OXe//E3M4gr+zJGLpmyKooKmITHU1pWZkVmnhZNMm3f1KNm1kktt2NmZee4lJjaZpaVHT3d2kphgQu5AEfM3KKQxQFcEpiZ3x/G/ByxEkRmRl7Px6PH7VzXNTOf73ju8eLN9b0uD5vNZhMAAAAAAAAAwCUYnF0AAAAAAAAAAOD/I7QFAAAAAAAAABdCaAsAAAAAAAAALoTQFgAAAAAAAABcCKEtAAAAAAAAALgQQlsAAAAAAAAAcCGEtgAAAAAAAADgQghtAQAAAAAAAMCFENoCAAAAAAAAgAshtAUAF/Pyyy8rIiJC3333nbNLOSuVlZV6+eWXdfXVV6tLly6KiIjQhg0bnFrTxIkTFRERoYMHDzq1DgAAgMaMee359/HHHys5OVndu3dXRESEnnvuOUnSlVdeqSuvvNLJ1QE4F57OLgAA6tPBgwfVr1+/Gu3NmzdX27ZtNWDAAKWkpKhly5ZOqK7hVH8OycnJmjlz5nl9r9TUVM2fP1/x8fG69tpr5enpqQ4dOvzhc2w2mz766CO99957+t///qejR4/Kx8dHISEhio2N1XXXXaeEhITzWjcAAIArY157kqvPa6+88kr99NNP9scGg0E+Pj7q3Lmzbr/9dvXv3/+81bt161aNGzdObdu21W233abmzZurW7duvzv+5Zdf1vz587Vs2TL16tXrvNUFoH4Q2gK4ILVr10433HCDpJMBYUlJib766iu9/PLLSktL05tvvimj0ejkKi8Mn3/+uVq0aKElS5bIy8vrrJ4zadIkvf/++/L19dVf//pXmUwm/frrr8rNzdWqVat05MgRQlsAAAAxr21IdZnXSpLRaNT9998v6eRq3T179uizzz7TN998owkTJujuu+8+L/V+8cUXstlsmjVrlnr06OHQt3Tp0vPyngAaDqEtgAtSu3bt9PDDDzu0VVRUaOjQocrKylJGRoZ69+7tpOouLIcOHZK/v/9ZT2w3bdqk999/X1FRUVqxYoVatWrl0F9WVqbdu3efj1IBAADcDvPahlPbeW01o9FY4+/o66+/1j333KOXXnrJvgq2vh06dEiSFBISUqOvXbt29f5+ABoWe9oCaDS8vLzstwEdPny4Rv+uXbv06KOPqnfv3urSpYuuvPJKPffccw5jDx8+rL/85S/q3r279u3b5/D83+uLiIjQsGHD9Msvv2jMmDHq1auXunXrpr/97W9KT0+v1TV89tlnGjZsmHr27KmuXbvqhhtuUGpqqqqqquxj3n//ffutdKtXr1ZERIT9v7PdT+y9997TkCFD1L17d3Xv3l1DhgzR+++/7zCmeo+ygwcP6qeffrK/x5/tnbV161ZJ0k033VQjsJUkHx+fGisFfvzxR82ePVvJycnq1auXYmJiNGDAAM2ZM0dHjx49q2uqlpmZqfvuu0+9evVSly5ddPXVV+uFF17Q8ePHa4z95JNPdOedd6p3796KiYlRUlKSRowYoU8++aRW7wkAAFCfmNe6xrz2jyQlJalDhw46fvy48vLyJEnDhg1TRESETpw4oRdeeEH9+/dX586d9fLLL9uft3nzZo0ePVoJCQmKiYnRNddco5deeslhrvrdd98pIiLCfh39+vWz11x9psPpe9oOGzZM8+fPlyQNHz68Xq4RwPnFSlsAjUZFRYUyMjLk4eGhqKgoh75NmzbpnnvuUWVlpQYMGKCLL75YWVlZWrZsmb744gu98847CggIkL+/v2bNmqW7775bY8eO1VtvvaUmTZpIkp588kkVFBRo5syZat++vcPrl5aW6rbbbpO/v7+GDBmikpISrVu3zv7b97PZ6yo1NVUzZ86Un5+frr/+erVo0UKfffaZZs6cqU2bNmn+/Pn2axs+fLiWLVumyMhIh9e++OKL//R9nn32WS1fvlwmk0mDBw+WJP3f//2fnnjiCWVnZ2vy5MmSpISEBD300EN6/fXXJUl33XWXJMnb2/sPX9/Pz0+StHfv3j+tpdr69ev13nvvqVevXkpISJDVatX333+vxYsXKzMzUytWrLD/PfyRN998U1OnTpWPj4+uuOIKBQQEaMeOHVqwYIG+++47LVu2zL6y4s0339SUKVMUHBysq666Sn5+fiosLNT27du1fv16DRgw4KzrBwAAqE/Ma11jXnu2PDw8HB4//PDDys3NVZ8+feTj46M2bdpIktatW6exY8fKy8tL1157rQIDA/XNN9/olVde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XidOnHDY+6o6TLRYLH/4urV5n+rP59T3OR9atGjh8PjAgQOy2WxKTEx0CGyl///5nY3qH2yqt0moDX9/f/Xv31/z5s3TZZddpt27d2vfvn21fh0AAID6wrz2j7nCvLY2qus909/dzz//rAMHDqht27bnFDQbDCcjoFP/NwPAdRHaAmhUqm8di4+Pt7f16NFD7dq101dffaX09HSH8f/+979lNps1cOBA++34x44ds++3OnfuXIWEhOj5559XVVWVxowZoxMnTtR4X4vForlz58pms9nbcnNz9eGHHyogIEB9+/b9w7oHDRokT09PLV261OF2sYqKCs2ZM0eSlJycbG/38fGRh4eHfvnll7P6XKpVv8Yrr7zicLtYeXm5fUXrqe9TF1999ZU2bNigqqqqGn379u3Tf//7X0lSz549JZ3cw0uStm7d6jDB/OWXXzR37tyzft/bb79dnp6emjZtmvLz82v0l5WV2feBk05O8E/9+5KkyspK+zYLTZs2Pev3BgAAqG/Ma/9YQ8xr61P//v3l7e2t999/3yEwt9lsmjNnjqqqqs653urDz37++edzeh0ADYPtEQBckPbv36+XX37Z/ri0tFRbtmzRzp075evraz+ZVjr5G+cZM2bonnvu0ejRozVgwABdfPHF2rp1qzIyMtSuXTuH8c8995x+/PFHTZgwwb6SIDY2Vg8++KBefPFFzZ49W0899ZRDPREREdqyZYsGDx6sxMRElZSUaN26dbJYLJo2bVqNE2VPV13DzJkzdcMNN+jaa69V8+bN9fnnn+vHH39Uv379dOONN9rHt2zZUjExMcrMzNTf//53tW/fXgaDQTfeeOMZD46oFh8fr2HDhmn58uW6/vrrdfXVV8tms+n//u//9Msvv2jYsGEOPxjUxZ49ezRjxgz5+/srPj5ebdu2lc1m0/79+/Xll1+qsrJSt912m/1AjZCQEA0YMECffPKJBg8erMsuu0zFxcX64osvdNlll2n//v1n9b7h4eH6xz/+oWeeeUbXXHON+vbtq7Zt2+ro0aM6ePCgMjIylJycrKlTp0o6ecJyq1at1K1bN4WGhqqqqkrp6enavXu3/X8jAAAA5xvzWted19anVq1aadq0aRo7dqxuvfVWXXvttQoICFB6erp27typrl276p577jmn9+jVq5c8PDw0d+5c5eXlydvbWz4+Prrz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0t/+9je98cYbmj17tgYPHqxvv/1W69at08KFC+21pKSkaMKECerSpYu6du2q119/XcePH9fNN9/c4J8LAAAAAAD4fUajUTExMc4uAwDqjUuFtm+99ZYkadiwYQ7tM2bMsIelkyZNksFg0COPPKKKigolJSXpH//4h32s0WjUggUL9Mwzz2jo0KFq3ry5kpOT9cgjj9jHtG3bVgsXLtSMGTO0bNkytW7dWs8++6z69OljH3PdddeppKREL730kgoLCxUVFaVXX3211tsjAAAAAAAAAEBteNhsNpuzi7gQWSwWZWVlKTY2llsyAAAAzhFzK+fhswcAAKg/Zzu3MjRgTQAAAAAAAACAP0FoCwAAAAAAAAAuhNAWAAAAAAAAAFwIoS0AAAAAAAAAuBBCWwAAAAAAAABwIYS2AAAAAAAAAOBCCG0BAAAAAAAAwIUQ2gIAAAAAAACACyG0BQAAAAAAAAAXQmgLAAAAAAAAAC6E0BYAAABwgoKCAo0bN069evVS165dNWjQIG3fvt3eb7PZ9OKLLyopKUldu3bViBEjtHfvXofXMJvNGjt2rHr06KG4uDhNmjRJR48edRiTm5ur22+/XTExMerbt68WL17cEJcHAACAc0BoCwAAADSw0tJS3XbbbWrSpIkWL16s//znP5owYYJ8fX3tYxYvXqzly5frmWee0cqVK9W8eXONHDlSJ06csI8ZN26cdu/erdTUVC1YsECbNm3S008/be8/cuSIRo4cqdDQUL3//vsaP3685s+fr3feeadBrxcAAAC14+nsAgAAAIDGZvHixWrdurVmzJhhb2vbtq39zzabTcuWLdP999+v/v37S5Jmz56txMREbdiwQQMHDtQPP/ygtLQ0rVq1SjExMZKkyZMna/To0Ro/frxMJpM++ugjVVZWavr06fLy8lJYWJhycnKUmpqqoUOHNuxFAwAA4Kyx0hYAAABoYJ999pm6dOmiRx55RL1799ZNN92klStX2vsPHjyowsJCJSYm2tu8vb3VrVs3bd26VZK0detW+fj42ANbSUpMTJTBYNC2bdskSVlZWYqLi5OXl5d9TFJSkn788UeVlpae78sEAABAHbHSFgAAAGhgBw4c0FtvvaWUlBTdd9992r59u5599lk1adJEycnJKiwslCQFBgY6PC8wMFBFRUWSpKKiIgUEBDj0e3p6ytfX1/78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feKEjFarrEajE6sEgLqpc2jr6empiooKSf9/L9ubbrrJ3h8YGKjDhw+fc4EAAABAfbn88svVokUL2Ww2/fOf/9TAgQPVuXNnhzEeHh5q3ry5OnfurJiYGCdVCgD4M02aNFGFxaIf/PwUX1CgcZs3q315ufZ5e+vdsDBlmkzysNnUpEkTZ5cKALVW59A2LCxMH330kQYNGqT169fLbDarb9++9v78/Hz5+/vXS5EAAABAfejevbu6d+8uSTp+/LiuuuoqRUREOLkqAEBdeHp6qkpSz4ICTczMVG5goDJMJgWcOKGJmZmaER+vrSEh8vSsc/QBAE5T52+uBx98UPfdd58uu+wySVKPHj3sf5akL7/8kpUJAAAAcFkPPfSQs0sAAJyDEydOyGowKLKkRPf361dje4QB+/ZpU+vWOnHihBOrBIC6qXNoe/nll2v16tX65ptv5OPjo+uuu87eV1paqri4OPXr169eigQAAADO1fz58+Xh4aH7779fBoNB8+fP/9PneHh46MEHH2yA6gAAtWWxWCRJK6KiamyPsCosTCsiIx3GAYA7Oad7BDp16qROnTrVaPf19dWkSZPO5aUBAACAelUd2o4aNUpeXl6EtgBwATBYrep56JAmZWbK8FtbpNmsSZmZei4+XltCQmQxGP7wNQDAFZ3zxi5ZWVn67rvvVFxcrNtvv12XXHKJjh8/rj179uiSSy5Ry5Yt66NOAAAA4Jzk5ub+4WMAgPuxGgwakpcnm6TtgYEqadpUASdOKLq4WEN271Zm69bOLhEA6qTOoW1FRYXGjBmjTz/9VDabTR4eHrriiit0ySWXyGAw6O6779aIESN0//3312e9AAAAQJ089NBDGjFihOLi4iRJmZmZ6tixowICApxcGQDgXPzSooXm9OxZY0/bO3NynFgVAJybOt8j8OKLL+qLL77QM888o//+97+y2Wz2vqZNm+qaa67Rp59+Wi9FAgAAAOfq008/VX5+vv3x8OHD9c033zixIgBAfXihRw9dUlam2WlpemftWs1OS9MlZWV6oUcPZ5cGAHVW59D2P//5j/72t79p6NCh8vX1rdHfsWNHHThw4JyKAwAAAOqLyWRSzimrrqrvFgMAuC+j1aq4ggJNysxUpNms5haLfU/buIICGa1WZ5cIAHVS5+0RiouLFRER8bv9RqNRv/76a11fHgAAAKhX1113nZYsWaJ169bJ29tbkvT8889r4cKFv/scDw8PffTRRw1VIgCgliy/7Wl7+oo0g8SetgDcWp1D24suukh79uz53f4tW7aoXbt2dX15AAAAoF6NHTtW7du3tx+i6+HhoebNm8vPz8/ZpQEAzkH78vIztrcrK2vgSgCg/tQ5tL3++uuVmpqqq6++Wpdccokk2W8vW7lypdatW6exY8fWS5EAAADAuTIajRo6dKiGDh0qSYqMjNT999+vQYMGObkyAMC52OftrTCzWdmBgSpp2lQBJ04ourhY+318nF0aANRZnUPb++67T99//73uvPNOXXrppfLw8NCMGTNUWlqqX375RX379tWIESPqsVQAQH2zWq3KycmR2WyWn5+foqKiZDDUebtzAHArn376qQICApxdBgDgHBisVi3s0kXlTZvqUIsW9vaQY8fkfeKEjFarLMxvAbihOoe2Xl5eevXVV/XRRx/pk08+kdVqVUVFhSIiIvTYY4/pxhtv5GAHAHBhGRkZWp6aqsLDh+1twf7+GpaSooSEBCdWBgAN4+KLL5YkHThwQF999ZXy8/MlSaGhofrLX/6itm3bOrM8AMBZsBoM+sHPT/EFBRq3ebPal5drn7e33g0LU6bJJJFLAHBTdQ5tpZPbIdx444268cYb66seAEADyMjI0Atz56pHfr4eyc5W29JSHfD11QfR0Xph7lw9PmYMwS2ARmHmzJlatmyZrKedLm4wGHTXXXdpwoQJTqoMAHA2DFareh46pCczM+2HkUWazXoyM1PPxsdra0gIK20BuCW+uQCgkbFarVqemqoe+fkam5amsOJiNauqUlhxscampalHfr5WpKbWCDAA4EKzZMkSLV26VFdddZXeeecdbdq0SZs2bdI777yjAQMGaOnSpVq6dKmzywQA/AGrwaAheXk1wg2DpFt37yawBeC2znql7fDhw2v94h4eHnr99ddr/TwAwPmTk5OjwsOH9Uh29hkntzdmZ+vp0FDl5OSoc+fOzigRABrEypUrdeWVV+rFF190aO/WrZteeOEFnThxQm+//TbnNACAi2tfXn7G9nZlZQ1cCQDUn7P+lZPNZqv1f6zSAgDXYzabJUltS0vP2F/dXj0OAC5UP/30k5KSkn63PykpST/99FMDVgQAqIt93t5nbN/v49PAlQBA/TnrlbbLly8/n3UAABqIn5+f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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualize the correlation matrix using a heatmap\n",
        "\n",
        "plt.figure(figsize=(12, 10))\n",
        "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\")\n",
        "plt.title('Correlation Matrix of Variables')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 853
        },
        "id": "FFpsFBmeGaPv",
        "outputId": "df5c7457-ba34-4527-ce22-f11aab511689"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x1000 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}